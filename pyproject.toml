[tool.poetry]
name = "ReliabiliPy"
version = "0.0.1"
description = ""
authors = ["John Doe <johndoe@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
autograd = "^1.7.0"
scipy = ">=1.10.1"
numpy = "^2.1.1"
pandas = ">=2.0.1"
autograd-gamma = ">=0.5.0"
mplcursors = ">=0.5.2"
pyarrow = "^17.0.0"
pathlib = "^1.0.1"
openpyxl = "^3.1.2"
xlsxwriter = "^3.2.0"
pydantic = "^2.8.2"



[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
ruff = "^0.6.4"
pre-commit = "^3.7.1"
docformatter = "^1.7.5"
pytest-cov = "^5.0.0"
pytest-profiling = "^1.7.0"
snakeviz = "^2.2.0"
pytest-xdist = "^3.6.1"
pytest-mock = "^3.12.0"
pyright = "^1.1.379"
pytest-sugar = "^1.0.0"
pytest-rerunfailures = "^14.0"


[tool.ruff]
# Same as Black.
line-length = 120

[tool.ruff.lint]
exclude = ["docs/conf.py"]

select = [
    "ALL",  # enable all rules
    "F",  # pyflakes
    "E",  # pycodestyle errors (settings from FastAPI, thanks, @tiangolo!)
    "W",  # pycodestyle warnings
    "I",  # isort
    #"N",  # pep8-naming
    "UP", # pyupgrade
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    #"A",  # flake8-builtins
    "COM",# flake8-commas
    "C4", # flake8-comprehensions
    "DTZ",# flake8-datetimez
    "S",  # flake8-bandit
    "SIM",# flake8-simplify
    #"FURB", # refurb
    #"LOG",# flake8-logging
    "RUF", # RUF-specific rules
]
ignore = [
    "FIX002", #flags on TODOs
    #"COM812",
    "ISC001",
    "PT004",
    "ISC003", #do not enfore removing + for concatenating string literals
    "TD002", # missing-todo-author
    "TD003", #missing issue link for TODO
    "D213", #multi-line summary secondline, choosing D212 for first line
    "D203", #choosing D211 no blank line before class
    "N999", #invalid module-name
    "PGH003",# Use specific rule codes when ignoring type issues
    "N802", #invalid function ame
    "ANN201", #missing-return-type
    "D401", #first line should be in imperative mood
    "D205", #1 blank line required between summary line and description
    "D103", # Missing docstring in public function
    "ANN205", # missing-return-type-static-method
    "ANN003", #  missing-type-kwargs
    "ANN204", #missing-return-type-special-method
    "N801", #invalid-class-name
    "D404", #docstring-starts-with-this
    "PD901", #   pandas-df-variable-name
    "D107", #    undocumented-public-init"
    "ERA001",#  commented-out-code"
    "D417",#    undocumented-param"
    "PLW0128", # redeclared-assigned-name"
    "FBT001", # " boolean-type-hint-positional-argument"
    "E501",  # line too long, handled by black
    "FBT003",# Boolean positional value in function call"
    "ANN101", #missing-type-self
    "N806", #non-lowercase-variable-in-function
    "T201", # print statement
    "N803", #invalid-argument-name
    "ANN001", #missing-type-function-argument
    "ANN202", #missing-return-type-private-function
    "FBT002", #boolean-default-value-positional-argument
    "D100", # Missing docstring in public module
    "SLF001"
]
allowed-confusables = ["x", "α", "σ", "α", "γ"]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["PLR2004","S101", "SLF001", "INP001", "ANN202","PT011"]
"conftest*.py" = ["INP001", "ANN202"]
"*_utils.py" = ["SLF001"] #TODO: Refactor Utils functions to not access private memebrs
"_fit_everything_alt.py" = ["PLR0912", "PLR0915"] #TODO:Refactor fit_everything_alt into two fucntions for single and dual stress

[tool.ruff.lint.pylint]
max-args = 16
max-branches = 80
max-statements = 400
[tool.ruff.lint.mccabe]
max-complexity = 80

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
