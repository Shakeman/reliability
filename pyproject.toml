[tool.poetry]
name = "reliability"
version = "0.1.0"
description = ""
authors = ["John Doe <johndoe@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
autograd = ">=1.5"
scipy = ">=1.10.1"
numpy = ">=1.24.2"
matplotlib = ">=3.7.1"
pandas = ">=2.0.1"
autograd-gamma = ">=0.5.0"
mplcursors = ">=0.5.2"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
ruff = "^0.1.11"
pre-commit = "^3.6.0"
docformatter = "^1.7.5"
pytest-cov = "^4.1.0"
pytest-profiling = "^1.7.0"
snakeviz = "^2.2.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.12.0"
pyright = "^1.1.350"


[tool.ruff]
# Same as Black.
line-length = 120

fix = true
fixable = ["COM", "E", "F"]
exclude = ["tests", "docs/conf.py"]

select = [
    "F",  # pyflakes
    "E",  # pycodestyle errors (settings from FastAPI, thanks, @tiangolo!)
    "W",  # pycodestyle warnings
    "I",  # isort
    #"N",  # pep8-naming
    "UP", # pyupgrade
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    #"A",  # flake8-builtins
    "COM",# flake8-commas
    "C4", # flake8-comprehensions
    "DTZ",# flake8-datetimez
    "S",  # flake8-bandit
    "SIM",# flake8-simplify
    #"FURB", # refurb
    #"LOG",# flake8-logging
    "RUF", # RUF-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
    "RUF001",  # ambiguous unicode string
    "RUF002",  # ambiguous unicode string
    "S101",    # Use of `assert` detected
]

[tool.ruff.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
