import numpy as np
from numpy.testing import assert_allclose

from reliability.Utils import unpack_single_arrays
from reliability.Utils._array_utils import anderson_darling

atol = 1e-3
rtol = 1e-3


def test_unpack_single_arrays():
    # Test case with a single element array
    array1 = np.array([5.0])
    assert unpack_single_arrays(array1) == 5.0

    # Test case with a single element float
    array2 = 10.0
    assert unpack_single_arrays(array2) == 10.0

    # Test case with a regular array
    array3 = np.array([1.0, 2.0, 3.0])
    assert np.array_equal(unpack_single_arrays(array3), array3)

    # Test case with a regular list
    array4: list[float] = [4.0, 5.0, 6.0]
    assert unpack_single_arrays(array4) == array4

    # Test case with an empty array
    array5 = np.array([])
    assert np.array_equal(unpack_single_arrays(array5), array5)

    # Test case with an empty list
    array6 = []
    assert unpack_single_arrays(array6) == array6  # type: ignore


def test_anderson_darling():
    empirical_cdf = np.array(
        [
            0.82946798,
            0.40845323,
            0.94959726,
            0.5326406,
            0.7106099,
            0.68518572,
            0.26196328,
            0.96294495,
            0.05098662,
            0.20122354,
            0.1297242,
            0.88285877,
            0.31055507,
            0.22551944,
            0.02935022,
            0.63433734,
            0.21337149,
            0.27411122,
            0.57077688,
            0.08344121,
            0.86951107,
            0.01853202,
            0.50754236,
            0.54535269,
            0.23766738,
            0.81612028,
            0.76272949,
            0.24981533,
            0.10643716,
            0.3712948,
            0.55806479,
            0.62162525,
            0.48277008,
            0.98964035,
            0.06180482,
            0.39606708,
            0.04016842,
            0.38368094,
            0.15332592,
            0.67247362,
            0.43322551,
            0.65976153,
            0.89620646,
            0.14152506,
            0.723322,
            0.32270301,
            0.35914685,
            0.74938179,
            0.85616337,
            0.29840712,
            0.77607718,
            0.17692765,
            0.07262301,
            0.84281567,
            0.92290186,
            0.80277258,
            0.97629265,
            0.16512678,
            0.33485096,
            0.00771383,
            0.51992851,
            0.90955416,
            0.78942488,
            0.59620107,
            0.73603409,
            0.47038394,
            0.60891316,
            0.4579978,
            0.42083937,
            0.28625917,
            0.69789781,
            0.18907559,
            0.11808068,
            0.49515622,
            0.58348897,
            0.34699891,
            0.44561165,
            0.64704944,
            0.09479364,
            0.93624956,
        ]
    )

    fitted_cdf = np.array(
        [
            0.84271849,
            0.34633226,
            0.97318884,
            0.52216118,
            0.70690671,
            0.68072877,
            0.25647807,
            0.97556812,
            0.0366197,
            0.2321588,
            0.16398569,
            0.88294457,
            0.29577966,
            0.24497982,
            0.03281914,
            0.62426083,
            0.23541332,
            0.26025641,
            0.55298893,
            0.05864629,
            0.87353621,
            0.03083986,
            0.49324668,
            0.52605485,
            0.24824612,
            0.83289821,
            0.75742176,
            0.24880312,
            0.15039827,
            0.3259362,
            0.53706035,
            0.62325683,
            0.42189979,
            0.99695381,
            0.05212605,
            0.34171969,
            0.0336819,
            0.33703588,
            0.19807879,
            0.64616349,
            0.37938568,
            0.64320183,
            0.89669411,
            0.19676026,
            0.72358002,
            0.30584013,
            0.3218961,
            0.75236885,
            0.87251828,
            0.28184213,
            0.7591409,
            0.21846053,
            0.05312189,
            0.8509954,
            0.91797413,
            0.77568926,
            0.97699354,
            0.20080476,
            0.31238989,
            0.02138543,
            0.49910657,
            0.89876166,
            0.77529015,
            0.58042164,
            0.74039463,
            0.40327557,
            0.6140588,
            0.39977953,
            0.35111231,
            0.2694095,
            0.70146404,
            0.2269169,
            0.1509871,
            0.43149201,
            0.56223441,
            0.31331259,
            0.38497919,
            0.63561649,
            0.11233278,
            0.9519931,
        ]
    )

    result_AD: float = anderson_darling(fitted_cdf, empirical_cdf)
    assert_allclose(result_AD, np.float64(0.6315618369139688), rtol=rtol, atol=atol)
